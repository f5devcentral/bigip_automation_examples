---
- name: Upload and update Swagger OpenAPI YAML file on BigIP TMOS
  hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - bigip_vars.yml

  tasks:
    - name: Read Swagger JSON file content
      ansible.builtin.slurp:
        src: "{{ swagger_file_path }}"
      register: swagger_file_content

    - name: Make unique file name
      set_fact:
        unique_file_name: "{{ swagger_file_path | basename | make_filename_unique }}"

    - name: Upload OpenAPI file to BigIP
      uri:
        url: "https://{{ tmos.address }}/mgmt/tm/asm/file-transfer/uploads/{{ unique_file_name }}"
        method: POST
        user: "{{ bigip_user }}"
        password: "{{ bigip_password }}"
        headers:
          Content-Type: "application/octet-stream"
          Content-Range: "0-{{ (swagger_file_content['content'] | b64decode | length) - 1 }}/{{ swagger_file_content['content'] | b64decode | length }}"
        body: "{{ swagger_file_content['content'] | b64decode | string }}"
        body_format: raw
        validate_certs: no
      register: v

    - name: Check if ASM policy exists
      uri:
        url: "https://{{ tmos.address }}/mgmt/tm/asm/policies?$filter=name+eq+'{{ item.name }}'"
        method: GET
        user: "{{ bigip_user }}"
        password: "{{ bigip_password }}"
        validate_certs: false
        return_content: yes
      register: asm_policy_lookup
      loop: "{{ policies_to_update }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Set fact for policy existence
      set_fact:
        policy_exists: "{{ asm_policy_lookup.results | map(attribute='json.items') | map('length') | list }}"

    - name: Get list of ASM policy templates
      uri:
        url: "https://{{ tmos.address }}/mgmt/tm/asm/policy-templates"
        method: GET
        user: "{{ bigip_user }}"
        password: "{{ bigip_password }}"
        validate_certs: false
        return_content: yes
      register: asm_templates

    - name: Extract API Security template link
      set_fact:
        api_template_link: >-
          {{
            asm_templates.json['items']
            | selectattr('title', 'equalto', 'API Security')
            | map(attribute='selfLink')
            | list
            | first
          }}

    - name: Create ASM policy using API Security template
      uri:
        url: "https://{{ tmos.address }}/mgmt/tm/asm/policies"
        method: POST
        user: "{{ bigip_user }}"
        password: "{{ bigip_password }}"
        validate_certs: false
        headers:
          Content-Type: "application/json"
        body_format: json
        status_code: [200, 201]
        body: |
          {
            "name": "{{ item.name }}",
            "partition": "{{ item.partition }}",
            "templateReference": {
              "link": "{{ api_template_link }}"
            },
            "virtualServers": ["/Common/demo_vs"]
          }
      loop: "{{ policies_to_update }}"
      loop_control:
        label: "{{ item.name }}"
        index_var: index
      when: policy_exists[index] == 0
      register: api_policy_creation

    - name: Import OpenAPI into the policy
      uri:
        url: "https://{{ tmos.address }}/mgmt/tm/asm/tasks/import-open-api"
        method: POST
        user: "{{ bigip_user }}"
        password: "{{ bigip_password }}"
        headers:
          Content-Type: "application/json"
        body: |
          {
            "policy":{"fullPath":"/{{ item.partition }}/{{ item.name }}"},
            "filename": "{{ unique_file_name }}"
          }
        body_format: json
        status_code: [200, 201]
        validate_certs: no
      register: import_openapi_response
      with_items: "{{ policies_to_update }}"

    - name: Apply policies
      bigip_asm_policy_manage:
        provider:
          server: "{{ tmos.address }}"
          server_port: 443
          user: "{{ bigip_user }}"
          password: "{{ bigip_password }}"
          validate_certs: false
          no_f5_teem: true
        name: "{{ item.name }}"
        partition: "{{ item.partition }}"
        active: true
        apply: true
      with_items: "{{ policies_to_update }}"