#!/bin/bash

# Send output to log file and serial console
mkdir -p  /var/log/cloud /config/cloud /var/config/rest/downloads
LOG_FILE=/var/log/cloud/startup-script.log
[[ ! -f $LOG_FILE ]] && touch $LOG_FILE || { echo "Run Only Once. Exiting"; exit; }
npipe=/tmp/$$.tmp
trap "rm -f $npipe" EXIT
mknod $npipe p
tee <$npipe -a $LOG_FILE /dev/ttyS0 &
exec 1>&-
exec 1>$npipe
exec 2>&1

echo "$(date +"%Y-%m-%dT%H:%M:%S.%3NZ") : Startup Script Start"

# Workaround for iAppsLX auth changes
tmsh modify sys db httpd.matchclient value false
bigstart restart httpd restnoded
sleep 60

# # create user
# tmsh create auth user ${bigip_username} password ${bigip_password} shell tmsh partition-access replace-all-with { all-partitions { role admin } }

# save config
tmsh save sys config
ssh_keypair2=$(cat /home/admin/.ssh/authorized_keys)

mkdir -p /config/cloud

# Create script to re-start runtime-init (test/dev)
cat << 'EOF' > /config/cloud/restart-runtime-init.sh
f5-bigip-runtime-init --config-file runtime-init-conf.yaml
EOF

cat << 'EOF' > /config/cloud/runtime-init-conf.yaml
---
controls:
  extensionInstallDelayInMs: 10000

pre_onboard_enabled:
  - name: provision_rest
    type: inline
    commands:
      - /usr/bin/setdb provision.extramb 1000 || true
      - /usr/bin/setdb restjavad.useextramb true || true
      - /usr/bin/setdb iapplxrpm.timeout 300 || true
      - /usr/bin/setdb icrd.timeout 180 || true
      - /usr/bin/setdb restjavad.timeout 180 || true
      - /usr/bin/setdb restnoded.timeout 180 || true
      - /usr/bin/setdb httpd.matchclient false || true

runtime_parameters:
  - name: HOST_NAME
    type: metadata
    metadataProvider:
      environment: aws
      type: compute
      field: hostname
  - name: SELF_IP_EXTERNAL
    type: metadata
    metadataProvider:
      environment: aws
      type: network
      field: local-ipv4s
      index: 1
  - name: SELF_IP_INTERNAL
    type: metadata
    metadataProvider:
      environment: aws
      type: network
      field: local-ipv4s
      index: 2
  - name: DEFAULT_GW
    type: metadata
    metadataProvider:
      environment: aws
      type: network
      field: subnet-ipv4-cidr-block
      index: 2
  - name: CLUSTER_PRIMARY
    type: static
    value: ${cluster_primary_ip}
  - name: CLUSTER_SECONDARY
    type: static
    value: ${cluster_secondary_ip}
  - name: APP_ROUTE
    type: static
    value: ${app_route}
  - name: UI_BANNER
    type: static
    value: ${bigip_hostname}
  - name: REMOTE_INDEX
    type: static
    value: "${remote_index}"
  - name: USER_NAME
    type: static
    value: ${bigip_username}
  - name: ADMIN_PASS
    type: static
    value: ${bigip_password}
  - name: SSH_KEYS
    type: static
EOF
echo "    value: $ssh_keypair2" >> /config/cloud/runtime-init-conf.yaml

# Add remaining BIG-IP Runtime Init parameters:
cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml

extension_packages:
  install_operations:
    - extensionType: do
      extensionUrl: ${DO_URL}
      extensionVersion: ${DO_VER}
    - extensionType: ts
      extensionUrl: ${TS_URL}
      extensionVersion: ${TS_VER}
    - extensionType: cf
      extensionUrl: ${CFE_URL}
      extensionVersion: ${CFE_VER}
    - extensionType: as3
      extensionUrl: ${AS3_URL}
      extensionVersion: ${AS3_VER}

extension_services:
  service_operations:
    - extensionType: do
      type: inline
      value:
        schemaVersion: 1.0.0
        class: Device
        async: true
        Common:
          class: Tenant
          hostname: '{{{HOST_NAME}}}.com'
          My_DbVariables:
            class: DbVariables
            provision.extramb: 1000
            ui.advisory.enabled: true
            ui.advisory.color: green
            ui.advisory.text: '{{{UI_BANNER}}}'
          myNtp:
            class: NTP
            servers:
              - 169.254.169.253
            timezone: UTC
          myDns:
            class: DNS
            nameServers:
              - 169.254.169.253
          myProvisioning:
            class: Provision
            ltm: nominal
          admin:
            class: User
            partitionAccess:
              all-partitions:
                role: admin
            password: '{{{ADMIN_PASS}}}'
            shell: bash
            keys:
              - '{{{SSH_KEYS}}}'
            userType: regular
          '{{{USER_NAME}}}':
            class: User
            partitionAccess:
              all-partitions:
                role: admin
            password: '{{{ADMIN_PASS}}}'
            shell: bash
            keys:
              - '{{{SSH_KEYS}}}'
            userType: regular
          external:
            class: VLAN
            tag: 4094
            mtu: 1500
            interfaces:
              - name: '1.1'
                tagged: false
          internal:
            class: VLAN
            tag: 4093
            mtu: 1500
            interfaces:
              - name: '1.2'
                tagged: false
          external-self:
            class: SelfIp
            address: '{{{SELF_IP_EXTERNAL}}}'
            vlan: external
            allowService: default
            trafficGroup: traffic-group-local-only
          internal-self:
            class: SelfIp
            address: '{{{SELF_IP_INTERNAL}}}'
            vlan: internal
            allowService: default
            trafficGroup: traffic-group-local-only
          default:
            class: Route
            network: default
            gw: '{{{DEFAULT_GW}}}'
            localOnly: true
          deviceTrust:
            class: DeviceTrust
            localUsername: '{{{USER_NAME}}}'
            localPassword: '{{{ADMIN_PASS}}}'
            remoteHost: "/Common/failoverGroup/members/{{{REMOTE_INDEX}}}"
            remoteUsername: '{{{USER_NAME}}}'
            remotePassword: '{{{ADMIN_PASS}}}'
          configSync:
            class: ConfigSync
            configsyncIp: "/Common/internal-self/address"
          failoverAddress:
            class: FailoverUnicast
            address: "/Common/internal-self/address"
          failoverGroup:
            class: DeviceGroup
            type: sync-failover
            members:
              - '{{{CLUSTER_PRIMARY}}}'
              - '{{{CLUSTER_SECONDARY}}}'
            owner: "/Common/failoverGroup/members/0"
            autoSync: true
            saveOnAutoSync: false
            networkFailover: true
            fullLoadOnSync: false
          traffic-group-1:
            class: TrafficGroup
            autoFailbackEnabled: false
            haOrder:
              - '{{{CLUSTER_PRIMARY}}}'
              - '{{{CLUSTER_SECONDARY}}}'
post_onboard_enabled: []
EOF

# # Download BIG-IP Runtime Init package and install
for i in {1..30}; do
    curl -fv --retry 1 --connect-timeout 5 -L ${INIT_URL} -o "/var/config/rest/downloads/f5-bigip-runtime-init.gz.run" && break || sleep 10
done
bash /var/config/rest/downloads/f5-bigip-runtime-init.gz.run -- '--cloud aws'

# Set debug logging (for test/dev)
export F5_BIGIP_RUNTIME_INIT_LOG_LEVEL=silly

# Run
f5-bigip-runtime-init --config-file /config/cloud/runtime-init-conf.yaml

echo "$(date +"%Y-%m-%dT%H:%M:%S.%3NZ") : Startup Script Finish"